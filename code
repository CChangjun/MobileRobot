#define F_CPU 14745600UL
#include <avr/io.h>
#include <util/delay.h>
#include <avr/interrupt.h>
#include <string.h> //strcmp 사용 sprintf
//#include "usart.h"
//#include "MPU9250.h"
#include <stdlib.h>
#include <math.h>
#define PI 3.141592
#define FUNCTION_WRITE 6
#define FUNCTION_ADDRESS 120
#define RPM_ADDRESS 121
#define FUNCTION_DATA_START 1
#define FUNCTION_DATA_STOP 2

#define RPM_MAX 2000

#define WHEEL_DIAMETER 0.125
#define WHEELBASE 0.12//0.28
#define MOTOR_REDUCER 20.0

#define LEFT_ID 2
#define RIGHT_ID 1
unsigned char BufferPacket[8] = {0,};

#define REC_BUFF_MAX_LENGTH 100
volatile unsigned char recData[REC_BUFF_MAX_LENGTH];
volatile unsigned char RecBuffindex = 0;
unsigned char RecFlg;
volatile char rec_rpm[REC_BUFF_MAX_LENGTH];
volatile char rec_angle[REC_BUFF_MAX_LENGTH];
#define REC_ANGULAR 1
#define REC_RPM 2

//double float 4byte, short,int 2byte
short rpm = 0;
short rpm_L = 0;
short rpm_R = 0;

float vel_difference = 0;
short rpm_difference = 0;
short w = 0 ;

int degree = 0;

void putchar_USART0(char data){
	while (!(UCSR0A & (1<<UDRE0))); // 송신 버퍼가 비어있을 때까지 대기
	UDR0 = data; // 데이터 전송
}

char getchar_USART0(void){
	while (!(UCSR0A & (1<<RXC0))); // 수신 완료될 때까지 대기
	return UDR0; // 수신된 데이터 반환
}
void echo_USART0(void){
	char receivedChar;
	receivedChar = getchar_USART0(); // 데이터 수신
	putchar_USART0(receivedChar); // 수신된 데이터를 다시 송신 (에코)
}


void sendBuff_USART0(char *str, int length)
{
	while (length--)
	{
		putchar_USART0(*str++); // 문자열의 끝까지 데이터를 전송
	}
}

void Init_USART0(void)
{
	UCSR0B = (1<<RXEN0) |(1<<TXEN0);
	UBRR0H = 0;
	UBRR0L = 7; //115200
	sei();
}

void Init_USART1(void)
{
	UCSR1B = (1<<RXEN1)|(1<<RXCIE1)|(1<<TXEN1);
	UBRR1H = 0;
	UBRR1L = 7; //115200
}

ISR(USART1_RX_vect)
{
	
	char receivedChar = UDR1; 
	recData[RecBuffindex++] = receivedChar; 

	if(receivedChar == ',') // 쉼표 전 linear velocity
	{
		recData[RecBuffindex-1] = '\0'; 
		strcpy(rec_rpm, recData); 
		RecBuffindex = 0; 
		memset(recData, 0, REC_BUFF_MAX_LENGTH); 
	}
	else if(receivedChar == '\n') // 쉼표 이후 개행문자 전 angular velocity
	{
		recData[RecBuffindex-1] = '\0'; 
		strcpy(rec_angle, recData);
		RecBuffindex = 0; 
		memset(recData, 0, REC_BUFF_MAX_LENGTH); 
	}
	
}
void putch_USART1(unsigned char data)
{
	while (!(UCSR1A & (1<<UDRE1)));
	UDR1 = data;
}

void puts_USART1(unsigned char *str)
{
	unsigned char total = 8;
	while(total--){
		putch_USART1(*str);
	str++;}
}

void Comport_USART1(unsigned char *str)
{
	while(*str != 0){
		putch_USART1(*str);
	str++;}
}

unsigned short CRC16_modbus(unsigned char *addr, int num)
{
	unsigned short CRC = 0xFFFF;
	int i;
	while (num--)
	{
		CRC ^= *addr++;
		for (i = 0; i < 8; i++)
		{
			if (CRC & 1)
			{
				CRC >>= 1;
				CRC ^= 0xA001;
			}
			else
			{
				CRC >>= 1;
			}
		}
	}
	return CRC;
}
void putchar_USART1(char data)
{
	while( !(UCSR1A & (1<<UDRE1)));
	UDR1 = data;
}

void sendBuff_USART1(char *str,int length)
{  // 문자열 출력 루틴
	while (length--)
	{
		putchar_USART1(*str++);  
	}
}

/*****************************************************************************
*		: [8][8][16][16][16]
*Packet : [id][order][Fnt adress][Fnt adress][data][data][CRC16bit][CRC16bit]
******************************************************************************/
void makePacket(unsigned char id, unsigned char order, unsigned short address, short data)
{
	BufferPacket[0] = id;
	
	BufferPacket[1] = order;

	BufferPacket[2] = 0x00;
	BufferPacket[3] = address;
	
	BufferPacket[4] = data/256;
	BufferPacket[5] = data%256;
	
	if(data < 0){ --BufferPacket[4]; } //or ~ -1 
		
	unsigned short CRC = CRC16_modbus(BufferPacket, 6);
	BufferPacket[6] = CRC%256;
	BufferPacket[7] = CRC/256;
	//sendBuff_USART1(BufferPacket,sizeof(BufferPacket));
	_delay_ms(100);
}
///////////////////////////////////////////////////////////////
void RPM(unsigned char id, short rpm)//실 속도 패킷
{
	makePacket(id, FUNCTION_WRITE, RPM_ADDRESS, rpm);
	sendBuff_USART1(BufferPacket,sizeof(BufferPacket));
	_delay_ms(30);
	sendBuff_USART0(BufferPacket, sizeof(BufferPacket)); 
	
}

void Start(unsigned char id) //뒷 패킷
{
	makePacket(id, FUNCTION_WRITE, FUNCTION_ADDRESS, FUNCTION_DATA_START);//FUNCTION_ADDRESS 120 ==> HEX78 
	sendBuff_USART1(BufferPacket,sizeof(BufferPacket));
	_delay_ms(30);
	sendBuff_USART0(BufferPacket, sizeof(BufferPacket)); 
	
}

/*
void Stop(unsigned char id)
{
	makePacket(id, FUNCTION_WRITE, FUNCTION_ADDRESS, FUNCTION_DATA_STOP);
	
	sendBuff_USART0(BufferPacket, sizeof(BufferPacket)); 
	_delay_ms(10);
}
*/

void forward()
{
	w = atof(rec_angle);
	rpm = atoi(rec_rpm);
	
	vel_difference = w * WHEELBASE;
	rpm_difference = (60.0 * vel_difference * MOTOR_REDUCER) / (PI * WHEEL_DIAMETER);
	
	rpm_L = (-rpm) + rpm_difference/2;
	rpm_R = rpm + rpm_difference/2;
	
	
	if(rpm_L < -RPM_MAX)
	{
		rpm_L = -RPM_MAX;
		rpm_R = RPM_MAX + rpm_difference;
	}
	else if(rpm_R > RPM_MAX)
	{
		rpm_L = -RPM_MAX+ rpm_difference;
		rpm_R = RPM_MAX;
	}
	
	RPM(LEFT_ID, rpm_L);
	RPM(RIGHT_ID, rpm_R);
	_delay_ms(1);
	//Start(2);
	//Start(1);
}


int main(void)
{
	Init_USART1();
	Init_USART0();
	
	
	while (1)
	{
		//Stop(2);
		forward();
		_delay_ms(20);
		//echo_USART0();
		//_delay_ms(10); 
	}
}

